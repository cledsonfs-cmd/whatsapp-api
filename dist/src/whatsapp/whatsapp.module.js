"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupController = exports.chatController = exports.sendMessageController = exports.viewsController = exports.instanceController = exports.webhookController = exports.waMonitor = exports.cache = exports.repository = void 0;
const env_config_1 = require("../config/env.config");
const logger_config_1 = require("../config/logger.config");
const event_config_1 = require("../config/event.config");
const message_repository_1 = require("./repository/message.repository");
const monitor_service_1 = require("./services/monitor.service");
const chat_repository_1 = require("./repository/chat.repository");
const contact_repository_1 = require("./repository/contact.repository");
const messageUp_repository_1 = require("./repository/messageUp.repository");
const chat_controller_1 = require("./controllers/chat.controller");
const instance_controller_1 = require("./controllers/instance.controller");
const sendMessage_controller_1 = require("./controllers/sendMessage.controller");
const auth_service_1 = require("./services/auth.service");
const group_controller_1 = require("./controllers/group.controller");
const views_controller_1 = require("./controllers/views.controller");
const webhook_service_1 = require("./services/webhook.service");
const webhook_controller_1 = require("./controllers/webhook.controller");
const repository_manager_1 = require("./repository/repository.manager");
const models_1 = require("./models");
const db_connect_1 = require("../db/db.connect");
const webhook_repository_1 = require("./repository/webhook.repository");
const webhook_model_1 = require("./models/webhook.model");
const auth_repository_1 = require("./repository/auth.repository");
const redis_client_1 = require("../db/redis.client");
const logger = new logger_config_1.Logger('WA MODULE');
const messageRepository = new message_repository_1.MessageRepository(models_1.MessageModel, env_config_1.configService);
const chatRepository = new chat_repository_1.ChatRepository(models_1.ChatModel, env_config_1.configService);
const contactRepository = new contact_repository_1.ContactRepository(models_1.ContactModel, env_config_1.configService);
const messageUpdateRepository = new messageUp_repository_1.MessageUpRepository(models_1.MessageUpModel, env_config_1.configService);
const webhookRepository = new webhook_repository_1.WebhookRepository(webhook_model_1.WebhookModel, env_config_1.configService);
const authRepository = new auth_repository_1.AuthRepository(models_1.AuthModel, env_config_1.configService);
exports.repository = new repository_manager_1.RepositoryBroker(messageRepository, chatRepository, contactRepository, messageUpdateRepository, webhookRepository, authRepository, env_config_1.configService, db_connect_1.dbserver === null || db_connect_1.dbserver === void 0 ? void 0 : db_connect_1.dbserver.getClient());
exports.cache = new redis_client_1.RedisCache();
exports.waMonitor = new monitor_service_1.WAMonitoringService(event_config_1.eventEmitter, env_config_1.configService, exports.repository, exports.cache);
const authService = new auth_service_1.AuthService(env_config_1.configService, exports.waMonitor, exports.repository);
const webhookService = new webhook_service_1.WebhookService(exports.waMonitor);
exports.webhookController = new webhook_controller_1.WebhookController(webhookService);
exports.instanceController = new instance_controller_1.InstanceController(exports.waMonitor, env_config_1.configService, exports.repository, event_config_1.eventEmitter, authService, exports.cache);
exports.viewsController = new views_controller_1.ViewsController(exports.waMonitor, exports.repository);
exports.sendMessageController = new sendMessage_controller_1.SendMessageController(exports.waMonitor);
exports.chatController = new chat_controller_1.ChatController(exports.waMonitor);
exports.groupController = new group_controller_1.GroupController(exports.waMonitor);
logger.info('Module - ON');
